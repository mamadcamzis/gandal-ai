import streamlit as st
from llama_index.core import VectorStoreIndex, ServiceContext, Document, SimpleDirectoryReader
from llama_index.llms.openai import OpenAI
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
#from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS

from langchain_openai import ChatOpenAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
import os
from PyPDF2 import PdfReader
import openai
import os


#OPENAI_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = st.secrets["openai_api"]["openai_key"]
st.header("Binevenue Ã  notre assistant RGPD ğŸ’¬ğŸ“š")

if "messages" not in st.session_state.keys(): # Initialize the chat message history
    st.session_state.messages = [
        {"role": "assistant", "content": "Posez moi une question sur le RGPD, Je serai ravi de vous aider!"}
    ]


@st.cache_resource(show_spinner=False)
def load_data():
    with st.spinner(text="Chargement et Indexation des documents RGPD, Cette opÃ©ration peut prendre plusieurs minutes. Merci de votre patience !"):
        reader = SimpleDirectoryReader(input_dir="./data", recursive=True)
        docs = reader.load_data()
        service_context = ServiceContext.from_defaults(llm=OpenAI(model="gpt-3.5-turbo",
                                                                   temperature=0.5,
                                                                    system_prompt="""Vous Ãªtes un assistant pour les tÃ¢ches de rÃ©ponses aux questions dâ€™un employÃ© qui analyse des donnÃ©es Ã  caractÃ¨re personnel.
Vous ne rÃ©pondez quâ€™en franÃ§ais. Utilisez les Ã©lÃ©ments de contexte rÃ©cupÃ©rÃ©s pour rÃ©pondre Ã  la question. Si vous ne connaissez pas la rÃ©ponse, dites simplement que vous ne la savez pas. 
Si la question comprend le sigle DCP, interprÃ¨te le en tant que DonnÃ©es Ã  CaractÃ¨re Personnel.
Si la question comprend le sigle ML, interprÃ¨te le en tant que Apprentissage Machine. 
Si la question ne porte pas sur un sujet relatif au RGPD, rÃ©pondez que vous nâ€™Ãªtes pas missionnÃ© pour rÃ©pondre Ã  cette question.  (peut Ãªtre trop restrictif Ã§a â€¦  mais jâ€™aimerais que Ã§a marche si on demande quel temps il fera demain â€¦.)
Si les Ã©lÃ©ments de contexte ne comprennent aucun Ã©lÃ©ment suffisamment prÃ©cis, rÃ©pondez que les Ã©lÃ©ments trouvÃ©s ne sont pas assez prÃ©cis, proposez de reformuler la question et dites quel Ã©lÃ©ment nâ€™a pas Ã©tÃ© trouvÃ©. Par exemple si une question porte sur les clients rÃ©siliÃ©s et que les Ã©lÃ©ments de contexte ne contiennent ni le qualificatif Â« rÃ©siliÃ© Â» ni un synonyme comme Â« inactif Â», rÃ©pondez Â« Je nâ€™ai trouvÃ© aucun Ã©lÃ©ment suffisamment prÃ©cis pour rÃ©pondre Ã  cette question, la notion de rÃ©siliÃ© nâ€™y est pas abordÃ©e Â». Vous pourrez ensuite proposer une rÃ©ponse plausible en commenÃ§ant par Â« Cependant, voici une rÃ©ponse plausible Ã  vÃ©rifier par dâ€™autres sources : Â».
Proposez une rÃ©ponse claire, complÃ¨te et concise, dans un style professionnel. Puis complÃ©tez votre rÃ©ponse en donnant lâ€™extrait le plus pertinent issu des Ã©lÃ©ments des contexte : nom du document, page, et extrait.
Pas besoin d'une rÃ©ponse dans une autre langue que le franÃ§ais."""))
        index = VectorStoreIndex.from_documents(docs, service_context=service_context)
        return index


index = load_data()
chat_engine = index.as_chat_engine(chat_mode="condense_question", verbose=True)

if prompt := st.chat_input("Votre question"): # Prompt for user input and save to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})

for message in st.session_state.messages: # Display the prior chat messages
    with st.chat_message(message["role"]):
        st.write(message["content"])

# If last message is not from assistant, generate a new response
if st.session_state.messages[-1]["role"] != "assistant":
    with st.chat_message("assistant"):
        with st.spinner("En recherche..."):
            response = chat_engine.chat(prompt)
            st.write(response.response)
            message = {"role": "assistant", "content": response.response}
            st.session_state.messages.append(message) # Add response to message history